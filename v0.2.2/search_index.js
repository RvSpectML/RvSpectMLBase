var documenterSearchIndex = {"docs":
[{"location":"types/","page":"Types","title":"Types","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"types/#Types-Exported-by-RvSpectMLBase","page":"Types","title":"Types Exported by RvSpectMLBase","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Pages = [\"types.md\"]\nDepth = 3","category":"page"},{"location":"types/#Abstract-Types","page":"Types","title":"Abstract Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ RvSpectMLBase ]\nPrivate = false\nOrder = [:type]\nFilter = t -> isabstracttype(t)","category":"page"},{"location":"types/#RvSpectMLBase.AbstractChunkOfSpectrum","page":"Types","title":"RvSpectMLBase.AbstractChunkOfSpectrum","text":"Abstract type for any ChunkOfSpectrum \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractInstrument","page":"Types","title":"RvSpectMLBase.AbstractInstrument","text":"Abstract Base type for Instruments \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractInstrument1D","page":"Types","title":"RvSpectMLBase.AbstractInstrument1D","text":"Abstract Base type for 1-D extracted spectra Should be specialized for specific instruments. \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractInstrument2D","page":"Types","title":"RvSpectMLBase.AbstractInstrument2D","text":"Abstract Base type for 2-D extracted spectra. Should be specialized for each instrument \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractSpectra","page":"Types","title":"RvSpectMLBase.AbstractSpectra","text":"Abstract type for any Spectrum (or region of spectrum) \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractSpectra1D","page":"Types","title":"RvSpectMLBase.AbstractSpectra1D","text":"Abstract type for any 1-d Spectrum (or region of spectrum) \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractSpectra2D","page":"Types","title":"RvSpectMLBase.AbstractSpectra2D","text":"Abstract type for any 2-d Spectrum \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractSpectralTimeSeriesCommonWavelengths","page":"Types","title":"RvSpectMLBase.AbstractSpectralTimeSeriesCommonWavelengths","text":"Abstract type for a time series of spectra that share a common wavelength grid. \n\n\n\n\n\n","category":"type"},{"location":"types/#General-purpose","page":"Types","title":"General purpose","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ RvSpectMLBase ]\nPrivate = false\nOrder = [:type]\nFilter = t -> !isabstracttype(t)","category":"page"},{"location":"types/#RvSpectMLBase.ChunkList","page":"Types","title":"RvSpectMLBase.ChunkList","text":"Struct containing an array of ChunkOfSpectrum \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.ChunkListTimeseries","page":"Types","title":"RvSpectMLBase.ChunkListTimeseries","text":"Mtching lists of times and array of ChunkLists \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.ChunkOfSpectrum","page":"Types","title":"RvSpectMLBase.ChunkOfSpectrum","text":"ChunkOfSpectrum for views into Spectra1DBasic or Spectra2DBasic \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.Spectra1DBasic","page":"Types","title":"RvSpectMLBase.Spectra1DBasic","text":"Basic struct for Spectra1D (or region of specturm) Instruments can specialize their own if additional data is avaliable. \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.Spectra2DBasic","page":"Types","title":"RvSpectMLBase.Spectra2DBasic","text":"Basic struct for Spectra2D (or region of specturm) Instruments can specialize their own if additional data is avaliable. \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.SpectralTimeSeriesCommonWavelengths","page":"Types","title":"RvSpectMLBase.SpectralTimeSeriesCommonWavelengths","text":"Time series of spectra that share a common wavelength grid. \n\n\n\n\n\n","category":"type"},{"location":"types/#Instrument-specific","page":"Types","title":"Instrument specific","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ RvSpectMLBase.TheoreticalInstrument  ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types/#RvSpectMLBase.TheoreticalInstrument.TheoreticalInstrument1D","page":"Types","title":"RvSpectMLBase.TheoreticalInstrument.TheoreticalInstrument1D","text":"Trait for 1D spectra from a theoretical instrument \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.TheoreticalInstrument.TheoreticalInstrument2D","page":"Types","title":"RvSpectMLBase.TheoreticalInstrument.TheoreticalInstrument2D","text":"Trait for a 2D spectra from a theoretical instrument \n\n\n\n\n\n","category":"type"},{"location":"types/#Other","page":"Types","title":"Other","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ RvSpectMLBase.Pipeline  ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"functions/#Functions-Exported-by-RvSpectMLBase","page":"Functions","title":"Functions Exported by RvSpectMLBase","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Pages = [\"functions.md\"]\nDepth = 3","category":"page"},{"location":"functions/#General-purpose","page":"Functions","title":"General purpose","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [RvSpectMLBase ]\nPrivate = false\nOrder = [:function ]","category":"page"},{"location":"functions/#Base.length-Tuple{ACLT} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"Base.length","text":"Return number of times/ChunkLists in a ChunkListTimeseries \n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.length-Tuple{CLT} where CLT<:AbstractChunkList","page":"Functions","title":"Base.length","text":"Return number of chunks in ChunkList \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.absorption_line-Tuple{T} where T<:Real","page":"Functions","title":"RvSpectMLBase.absorption_line","text":"absorption_line(x; mid, width, depth)\n\nReturn a Gaussian absorption line profile evaluated at x.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.apply_doppler_boost!","page":"Functions","title":"RvSpectMLBase.apply_doppler_boost!","text":"`apply_doppler_boost!(spectrum, doppler_factor)`\n`apply_doppler_boost!(spectra, df)`\n\nApply Doppler boost to spectra's λ's and update its metadata[:doppler_factor], so it will know how to undo the transform.\n\nArguments:\n\nspectrum::AbstractSpectra: spectrum to be boosted\ndoppler_factor: boost factor (1 = noop)\n\nor:\n\nspectra: spectra to be boosted\ndf: DataFrame provides :drift and :ssb_rv (in m/s) for calculating the Doppler boost for each spectrum\n\nReturns spectrum/spectra with λ boosted TODO: Improve documentation formatting.  This can serve as a template.\n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.calc_doppler_factor","page":"Functions","title":"RvSpectMLBase.calc_doppler_factor","text":"calc_doppler_factor(rv; v_perp)    calc_doppler_factor(; z)\n\nReturn the Doppler boost factor (non-relativistic) for rv in m/s.\n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.calc_normalization-Tuple{ACL} where ACL<:AbstractChunkList","page":"Functions","title":"RvSpectMLBase.calc_normalization","text":"Calc normalization of spectra based on average flux in a ChunkList. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.calc_normalization-Tuple{AC} where AC<:AbstractChunkOfSpectrum","page":"Functions","title":"RvSpectMLBase.calc_normalization","text":"Calc normalization of chunk based on average flux in a ChunkOfSpectrum. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.calc_normalization_var_weighted-Tuple{ACL} where ACL<:AbstractChunkList","page":"Functions","title":"RvSpectMLBase.calc_normalization_var_weighted","text":"Calc normalization of spectra based on average flux in a ChunkList using inverse variance weighting. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.calc_normalization_var_weighted-Tuple{AC} where AC<:AbstractChunkOfSpectrum","page":"Functions","title":"RvSpectMLBase.calc_normalization_var_weighted","text":"Calc normalization of chunk based on average flux in a ChunkOfSpectrum using inverse variance weighting. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.code_to_include_param_jl-Tuple{}","page":"Functions","title":"RvSpectMLBase.code_to_include_param_jl","text":"code_to_include_param_jl( ; path_to_search, filename, verbose )\n\nReturns a Code object.  After res = code_toread_param_jl( path_to_search ), execute eval(res) to actually include the param.jl file. This is useful since it allows variables to be placed into caller's namespace.\n\nWarning:  Malicious users could insert arbitrary code into param.jl.  Don't be a malicous user.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.extract_chunklist_timeseries_with_subset_obs-Union{Tuple{CLT}, Tuple{AbstractChunkListTimeseries, Union{Integer, AbstractVector{Integer}}}} where CLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectMLBase.extract_chunklist_timeseries_with_subset_obs","text":"Make a ChunkListTimeseries containing a subset of observations from an existing  ChunkListTimeseries \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.filter_bad_chunks-Tuple{ACLT} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectMLBase.filter_bad_chunks","text":"Return (chunktimeseries) that have been trimmed of any chunks that are bad based on any spectra in the chunktimeseries. For now just checks for NaNs.  Instruments can provide their own checks. Inputs:\n\nchunk_timeseries: ChunkListTimeseries\n\nOptional arguemnts:\n\nverbose: print debugging info (false)\n\nReturns:\n\nChunkListTimeseries that has removed problematic chunks.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.find_line_best","page":"Functions","title":"RvSpectMLBase.find_line_best","text":"Return (pixels, order_idx) pair that contain \"best\" region of spectra, based on highest SNR. \n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.find_orders_in_range-Union{Tuple{T}, Tuple{Real, Real, AbstractMatrix{T}}} where T<:Real","page":"Functions","title":"RvSpectMLBase.find_orders_in_range","text":"Return list of all order indices that include any wavelengths between goallo and goalhi \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.find_orders_with_line-Union{Tuple{T}, Tuple{Real, AbstractMatrix{T}}} where T<:Real","page":"Functions","title":"RvSpectMLBase.find_orders_with_line","text":"Return list of all order indices that contain a pixel with wavelength lambda \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.find_orders_with_line-Union{Tuple{T}, Tuple{Real, Real, AbstractMatrix{T}}} where T<:Real","page":"Functions","title":"RvSpectMLBase.find_orders_with_line","text":"Return list of all order indices that contain all pixels with wavelengths between goallo and goalhi \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.find_pixels_for_line_in_chunk-Tuple{AbstractChunkOfSpectrum, Real, Real}","page":"Functions","title":"RvSpectMLBase.find_pixels_for_line_in_chunk","text":"Find pixels included in a range of wavelengths \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.findall_line","page":"Functions","title":"RvSpectMLBase.findall_line","text":"Return list of (pixels, order_idx) pairs that contain pixels with desireed wavelengths.     Excludes locations that contain any pixels with var == NaN.\n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.get_inst-Tuple{AS} where AS<:AbstractSpectra2D","page":"Functions","title":"RvSpectMLBase.get_inst","text":"Return instrument associated with spectrum \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.get_inst-Union{Tuple{AAS}, Tuple{AS}} where {AS<:AbstractSpectra2D, AAS<:AbstractVector{AS}}","page":"Functions","title":"RvSpectMLBase.get_inst","text":"Return instrument associated with first spectrum in array \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.get_order_info-Union{Tuple{T1}, Tuple{AAS}, Tuple{AS}} where {AS<:AbstractSpectra2D, AAS<:AbstractVector{AS}, T1<:Integer}","page":"Functions","title":"RvSpectMLBase.get_order_info","text":"Return DataFrame with information about which pixels and wavelengths to use from each order\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.get_λ_range-Tuple{CLT} where CLT<:AbstractSpectra","page":"Functions","title":"RvSpectMLBase.get_λ_range","text":"Return the largest minimum wavelength and smallest maximum wavelength of a spectrum.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.get_λ_range-Union{Tuple{ACLT}, Tuple{CLT}} where {CLT<:AbstractSpectra, ACLT<:(AbstractArray{CLT})}","page":"Functions","title":"RvSpectMLBase.get_λ_range","text":"Return the largest minimum wavelength and smallest maximum wavelength across an array of spectra. Calls getλrange(AbstractSpectra2D) that should be specialized for each instrument. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.make_chunk_list_around_lines-Union{Tuple{AS}, Tuple{AS, DataFrames.DataFrame}} where AS<:AbstractSpectra","page":"Functions","title":"RvSpectMLBase.make_chunk_list_around_lines","text":"make_chunk_list_around_lines( spectra, line_list) Return a ChunkList of best regions of spectrum with lines in lineline.     linelist is a DataFrame containing :lambdalo and :lambdahi.     Pads edges by Δ.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.make_grid_for_chunk-Union{Tuple{ACLT}, Tuple{ACLT, Integer}} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectMLBase.make_grid_for_chunk","text":"make_grid_for_chunk Create a range with equal spacing between points with end points set based on union of all chunks in timeseries.\n\nArguments:\n\ntimeseries: ChunkListTimeseries\nchunk index:\noversample_factor: (1)\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.make_orders_into_chunks","page":"Functions","title":"RvSpectMLBase.make_orders_into_chunks","text":"make_orders_into_chunks Return a ChunkList with a region of spectrum from each order in orderstouse.\n\nArguments\n\nspectra<:AbstractSpectra\ninst:  Instrument trait that provides default values\n\nOptional arguments\n\norderstouse: Range or Array (orderstouse(inst))\npixelstouse: Array of Ranges (each from mincol to maxcol)\n\nor\n\nmincol: (mincol_default(inst,order)) and\nmaxcol: (maxcol_default(inst,order))\n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.make_vec_metadata_from_spectral_timeseries-Union{Tuple{AA}, Tuple{AS}} where {AS<:AbstractSpectra, AA<:AbstractVector{AS}}","page":"Functions","title":"RvSpectMLBase.make_vec_metadata_from_spectral_timeseries","text":"Extract the metadata from a time series of spectra and return it as an array. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.normalize_spectra!-Union{Tuple{AS}, Tuple{ST}, Tuple{ACLT}, Tuple{ACLT, AS}} where {ACLT<:AbstractChunkListTimeseries, ST<:AbstractSpectra, AS<:(AbstractArray{ST})}","page":"Functions","title":"RvSpectMLBase.normalize_spectra!","text":"Normalize each spectrum based on sum of fluxes in chunk_timeseries region of each spectrum. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.normalize_spectrum!-Union{Tuple{ST}, Tuple{ST, Real}} where ST<:AbstractSpectra","page":"Functions","title":"RvSpectMLBase.normalize_spectrum!","text":"Normalize spectrum, multiplying fluxes by scale_fac. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.num_chunks-Tuple{ACLT} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectMLBase.num_chunks","text":"Number of chunks in first chunklist in chunklist_timeseries. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.num_times-Tuple{ACLT} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectMLBase.num_times","text":"Return number of times/ChunkLists in a ChunkListTimeseries \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.read_data_paths-Tuple{}","page":"Functions","title":"RvSpectMLBase.read_data_paths","text":"read_data_paths( ; path_to_search, filename, verbose ) Looks for datapaths.jl and includes it to set datapaths\n\nWarning:  Malicious users could insert arbitrary code into data_paths.jl.  Don't be a malicous user.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.set_rv_est!-Union{Tuple{T}, Tuple{ACLT}, Tuple{ACLT, AbstractVector{T}}} where {ACLT<:AbstractChunkListTimeseries, T<:Real}","page":"Functions","title":"RvSpectMLBase.set_rv_est!","text":"Create/update metadata entry rv_est for each observation in a ChunkListTimeseries \n\n\n\n\n\n","category":"method"},{"location":"functions/#Functions-to-be-Provided-for-Each-Instrument","page":"Functions","title":"Functions to be Provided for Each Instrument","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [RvSpectMLBase.InstrumentsCommon ]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"functions/#RvSpectMLBase.InstrumentsCommon.get_pixel_range","page":"Functions","title":"RvSpectMLBase.InstrumentsCommon.get_pixel_range","text":"Returns integer range of min and maximum pixels to use for specified instrument and order.\n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.InstrumentsCommon.orders_to_use_default-Tuple{AbstractInstrument}","page":"Functions","title":"RvSpectMLBase.InstrumentsCommon.orders_to_use_default","text":"Returns range of order indices to be used by default for the specified instrument\n\n\n\n\n\n","category":"method"},{"location":"functions/#Example-Instrument","page":"Functions","title":"Example Instrument","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [RvSpectMLBase.TheoreticalInstrument  ]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"functions/#RvSpectMLBase.TheoreticalInstrument.generate_spectra_timeseries-Tuple{AbstractArray, DataFrames.DataFrame, AnyTheoreticalInstrument, AbstractArray}","page":"Functions","title":"RvSpectMLBase.TheoreticalInstrument.generate_spectra_timeseries","text":"generate_spectra_timeseries(line_list, inst; time, rv, ssbz, snr_per_pixel, line_width, add_noise ) Generate a time series of spectra using times, a line_list (as DataFrame with columns lambda and weight) and a theoretical instrument. Optionally, specify times, rv's, barycentric corrections, etc.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.TheoreticalInstrument.generate_spectrum-Tuple{DataFrames.DataFrame, AnyTheoreticalInstrument}","page":"Functions","title":"RvSpectMLBase.TheoreticalInstrument.generate_spectrum","text":"generate_spectrum(line_list, inst; time, rv, ssbz, snr_per_pixel, line_width, add_noise ) Generate a spectrum using a line_list (as DataFrame with columns lambda and weight) and theoretical instrument. Optionally, specify times, rv's, barycentric corrections, etc.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Other","page":"Functions","title":"Other","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [ RvSpectMLBase.Pipeline  ]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"contents/#API-Overview","page":"Overview","title":"API Overview","text":"","category":"section"},{"location":"contents/","page":"Overview","title":"Overview","text":"Pages = [\"modules.md\",\"functions.md\", \"abstract_functions.md\", \"types.md\", \"internals.md\"]\nDepth = 5","category":"page"},{"location":"longlist/","page":"Index","title":"Index","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"longlist/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"longlist/","page":"Index","title":"Index","text":"","category":"page"},{"location":"abstract_functions/","page":"Instrument-Specific Functions","title":"Instrument-Specific Functions","text":"CurrentModule = RvSpectMLBase.InstrumentsCommon","category":"page"},{"location":"abstract_functions/#Functions-declared-in-RvSpectMLBase-and-specialized-for-each-instrument","page":"Instrument-Specific Functions","title":"Functions declared in RvSpectMLBase and specialized for each instrument","text":"","category":"section"},{"location":"abstract_functions/","page":"Instrument-Specific Functions","title":"Instrument-Specific Functions","text":"Pages = [\"abstract_functions.md\"]\nDepth = 2","category":"page"},{"location":"abstract_functions/","page":"Instrument-Specific Functions","title":"Instrument-Specific Functions","text":"todo: Todo\nFigure out what Documenter can't find the docstrings for these. They're in src/instruments/common.jl.","category":"page"},{"location":"abstract_functions/#Instrument-specific-traits","page":"Instrument-Specific Functions","title":"Instrument-specific traits","text":"","category":"section"},{"location":"abstract_functions/","page":"Instrument-Specific Functions","title":"Instrument-Specific Functions","text":"min_order\nmax_order\norders_all\norders_to_use_default\nmin_pixel_in_order\nmax_pixel_in_order\nmin_pixel\nmax_pixel\npixels_all\nmin_pixels_in_chunk\nmax_pixels_in_spectra\nmin_col_default\nmax_col_default\nmetadata_symbols_default\nmetadata_strings_default\ndefault_ccf_mask_v_width\nget_inst_module","category":"page"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.min_order","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.min_order","text":"Returns minimum allowable order for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.max_order","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.max_order","text":"Returns maximum allowable order for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.orders_all","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.orders_all","text":"Returns range of all allowable orders for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.orders_to_use_default","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.orders_to_use_default","text":"Returns range of order indices to be used by default for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.min_pixel_in_order","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.min_pixel_in_order","text":"Returns minimum allowable pixel index for the specified instrument and order index\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.max_pixel_in_order","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.max_pixel_in_order","text":"Returns maximum allowable pixel index for the specified instrument and order index\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.min_pixel","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.min_pixel","text":"Returns minimum allowable pixel index for the specified instrument and any order\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.max_pixel","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.max_pixel","text":"Returns maximum allowable pixel index for the specified instrument and any order\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.pixels_all","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.pixels_all","text":"Returns range of all allowable pixels for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.min_pixels_in_chunk","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.min_pixels_in_chunk","text":"Returns maximum number of pixels in a chunk from the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.max_pixels_in_spectra","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.max_pixels_in_spectra","text":"Returns maximum number of pixels in a spectrum for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.min_col_default","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.min_col_default","text":"Returns minimum pixel index to be used by default for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.max_col_default","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.max_col_default","text":"Returns maximum pixel index to be read from header into metadata by default for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.metadata_symbols_default","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.metadata_symbols_default","text":"Returns array of symbols to be stored from metadata in header by default for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.metadata_strings_default","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.metadata_strings_default","text":"Returns array of strings to be read from header into metadata by default for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.default_ccf_mask_v_width","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.default_ccf_mask_v_width","text":"Returns the default velocity width (in m/s) of a tophat CCF mask for the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.get_inst_module","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.get_inst_module","text":"Returns the module containing code specific to the specified instrument\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#Instrument-specific-computation","page":"Instrument-Specific Functions","title":"Instrument-specific computation","text":"","category":"section"},{"location":"abstract_functions/","page":"Instrument-Specific Functions","title":"Instrument-Specific Functions","text":"get_λ_range\nfilter_line_list","category":"page"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.get_λ_range","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.get_λ_range","text":"Returns the maximum range of wavelengths (in solar system barycenter frame) to be used for given spectrum\n\n\n\n\n\n","category":"function"},{"location":"abstract_functions/#RvSpectMLBase.InstrumentsCommon.filter_line_list","page":"Instrument-Specific Functions","title":"RvSpectMLBase.InstrumentsCommon.filter_line_list","text":"filter_line_list( df, inst ) Returns a dataframe filtered to only include lines appropriate for the specified instrument. Inputs:\n\ndf: Dataframe containing a column with key :lambda for wavelengths to be considered.\ninst: instrument whose properties will be used in choosing which lines to keep.\n\nOptional Inputs:\n\nλmin: Overide the instrument's default minimum wavelength\nλmax: Overide the instrument's default maximum wavelength\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"#RvSpectMLBase","page":"Home","title":"RvSpectMLBase","text":"","category":"section"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia 1.5.  On Penn State's ICS-ACI, it is avaliable at  /gpfs/group/ebf11/default/julia/bin/julia.\nInstall the RvSpectMLBase package and it's dependencies.  From julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"https://github.com/RvSpectML/RvSpectMLBase.jl\")\nPkg.instantiate()","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run the tests","category":"page"},{"location":"","page":"Home","title":"Home","text":"> include(\"test/runtests.jl\")","category":"page"},{"location":"#Related-Documentation","page":"Home","title":"Related Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RvSpectMLBase\nEchelleInstruments\nEchelleCCFs\nScalpels","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"internals/#RvSpectML-Internals","page":"Internals","title":"RvSpectML Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"As a heads up, these functions and types are more likely to change going forward than functions and types that are exported.  ","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]\nDepth = 3","category":"page"},{"location":"internals/#Functions","page":"Internals","title":"Functions","text":"","category":"section"},{"location":"internals/#General-purpose","page":"Internals","title":"General purpose","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase ]\nPublic = false\nOrder = [ :function ]","category":"page"},{"location":"internals/#Base.append!-Union{Tuple{CLT}, Tuple{CLT, CLT}} where CLT<:AbstractChunkList","page":"Internals","title":"Base.append!","text":"Append second chunk list to the first.  \n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.getindex-Union{Tuple{CLT}, Tuple{CLT, Any}} where CLT<:AbstractChunkList","page":"Internals","title":"Base.getindex","text":"Provide direct access to data, an AbstractArray of ChunkOfSpectrum's via [] operator \n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.getindex-Union{Tuple{CLT}, Tuple{CLT, Any}} where CLT<:AbstractChunkListTimeseries","page":"Internals","title":"Base.getindex","text":"Allow direct access to data, an AbstractArray of ChunkOfSpectrum's via [] operator \n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.setindex!-Union{Tuple{CLT}, Tuple{CLT, Any, CLT}} where CLT<:AbstractChunkList","page":"Internals","title":"Base.setindex!","text":"Provide direct access to data, an AbstractArray of ChunkOfSpectrum's via [] operator \n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.setindex!-Union{Tuple{CLT}, Tuple{CLT, Any, CLT}} where CLT<:AbstractChunkListTimeseries","page":"Internals","title":"Base.setindex!","text":"Allow direct access to data, an AbstractArray of ChunkOfSpectrum's via [] operator \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.allequal-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Internals","title":"RvSpectMLBase.allequal","text":"Return true if all elements of array are equal to each other. \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.calc_line_bisector_at_abs_depth-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}}} where {T1<:Real, T2<:Real}","page":"Internals","title":"RvSpectMLBase.calc_line_bisector_at_abs_depth","text":"calclinebisectoratabsdepth(λ, flux; absdepth ) Returns the line average of wavelengths (units of λ) at specified absolute line depth. Assumes continuum is the maximum flux provided.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.calc_line_bisector_at_frac_depth-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}}} where {T1<:Real, T2<:Real}","page":"Internals","title":"RvSpectMLBase.calc_line_bisector_at_frac_depth","text":"calclinebisectoratfracdepth(λ, flux; fracdepth, lineminwindowfraction ) Returns the line average of wavelengths (units of λ) at specified fractional line depth. Assumes continuum is the maximum flux provided. Assumes the line's minimum flux occurs within lineminwindowfraction, a central fraction of the total λ window. Returns NaN if target flux cannot be found on either side of the line\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.calc_line_width-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}}} where {T1<:Real, T2<:Real}","page":"Internals","title":"RvSpectMLBase.calc_line_width","text":"calclinewidth(λ, flux; fracdepth, lineminwindowfraction ) Returns the line width (units of λ) for specified fractional line depth (default of 0.5). Assumes continuum is the maximum flux provided. Assumes the line's minimum flux occurs within lineminwindow_fraction, a central fraction of the total λ window. Returns NaN if target flux cannot be found on either side of the line\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.calc_snr","page":"Internals","title":"RvSpectMLBase.calc_snr","text":"calc_snr(flux, var) calc_snr(spectrum, pixels, order_idx)\n\nCalculate total SNR in (region of) spectra.\n\n\n\n\n\n","category":"function"},{"location":"internals/#RvSpectMLBase.check_if_line_match-Union{Tuple{T}, Tuple{Real, AbstractVector{T}}} where T<:Real","page":"Internals","title":"RvSpectMLBase.check_if_line_match","text":"check_if_line_match ( λ, list ; threshold ) Return true if list contains a wavelength differing from λ by no more than threshold (in units of Δλ/λ)\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.find_cols_to_fit-Union{Tuple{T}, Tuple{AbstractVector{T}, Real, Real}} where T<:Real","page":"Internals","title":"RvSpectMLBase.find_cols_to_fit","text":"Return a range of columns indices with wavelengths between linelo and linehi \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.find_cols_to_fit-Union{Tuple{T}, Tuple{AbstractVector{T}, Real}} where T<:Real","page":"Internals","title":"RvSpectMLBase.find_cols_to_fit","text":"Return a range of columns indices with wavelengths within Δ of line_center \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.find_which_line_fits_in_line_list-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, AbstractVector{T2}}} where {T1<:Real, T2<:Real}","page":"Internals","title":"RvSpectMLBase.find_which_line_fits_in_line_list","text":"findwhichlinefitsinlinelist( fitlist, linelist; threshold ) Return list of Bools indicatin which line(s) from fitlist match a line in linelist to within threshold (in units of Δλ/λ) Warning: Untested\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.findargminmax-Tuple{Any}","page":"Internals","title":"RvSpectMLBase.findargminmax","text":"findargminmax(a) Return (argmin, min, argmax, max) Adapapted from https://github.com/JuliaLang/julia/blob/697e782ab86bfcdd7fd15550241fe162c51d9f98/base/array.jl#L2191\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.instrument-Tuple{ACLT} where ACLT<:AbstractChunkListTimeseries","page":"Internals","title":"RvSpectMLBase.instrument","text":"Get instrument used for chunklisttimeseries.  \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.interp_linear-Union{Tuple{}, Tuple{T2}, Tuple{T1}} where {T1<:Real, T2<:Real}","page":"Internals","title":"RvSpectMLBase.interp_linear","text":"`interp_linear(;x1,x2,y1,y2,xpred) Return result of simple linear interpolant at xpred. Does not test that xpred is between x1 and x2.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.is_in_wavelength_range_list-Tuple{Real, Real}","page":"Internals","title":"RvSpectMLBase.is_in_wavelength_range_list","text":"is_in_wavelength_range_list(λ_lo, λ_hi; list ) Return true if there is overlap between (λlo, λhi) and lambdalo and lambdahi for any row in list\n\nTODO: test\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.is_in_wavelength_range_list-Tuple{Real}","page":"Internals","title":"RvSpectMLBase.is_in_wavelength_range_list","text":"is_in_wavelength_range_list(λ; order, list ) Return true if λ is between lambdalo and lambdahi for any row in list\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.is_in_wavelength_range_list_any_order-Tuple{Real}","page":"Internals","title":"RvSpectMLBase.is_in_wavelength_range_list_any_order","text":"is_in_wavelength_range_list_any_order(λ; list ) Return true if λ is between lambdalo and lambdahi for any row in list\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.make_spectral_time_series_common_wavelengths_with_selected_times-Union{Tuple{T1}, Tuple{STSCWT}, Tuple{STSCWT, AbstractVector{T1}}} where {STSCWT<:AbstractSpectralTimeSeriesCommonWavelengths, T1<:Integer}","page":"Internals","title":"RvSpectMLBase.make_spectral_time_series_common_wavelengths_with_selected_times","text":"makespectraltimeseriescommonwavelengthswithselectedtimes( input, timeidx ) Returns a SpectralTimeSeriesCommonWavelengths, retaining only those times and spectra specified by timeidx.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.metadata-Union{Tuple{ACLT}, Tuple{ACLT, Integer, Symbol}} where ACLT<:AbstractChunkListTimeseries","page":"Internals","title":"RvSpectMLBase.metadata","text":"Get metadata[:key] of ith observation in chunklisttimeseries.  \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.multiple_append!-Union{Tuple{T}, Tuple{Vector{T}, Vararg{Any}}} where T<:Real","page":"Internals","title":"RvSpectMLBase.multiple_append!","text":"A generalized version of the built in append!() function By Christian Gilbertson?\n\nTODO:  Ask Christian what the purpose of this is relative to std append\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.predict_intrinsic_stellar_line_width-Tuple{Real}","page":"Internals","title":"RvSpectMLBase.predict_intrinsic_stellar_line_width","text":"Estimate line width based on stellar Teff (K) and optionally v_rot (m/s).  Output in m/s.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.searchsortednearest","page":"Internals","title":"RvSpectMLBase.searchsortednearest","text":"searchsortednearest(a<:AbstractVector, x::Real; assume_sorted = false )    searchsortednearest(a<:AbstractVector, x<:AbstractVector; assume_sorted = false )\n\nFind the index of vector a where the value of a is closest to x.    All vectors are assumed to already be sorted.    To turn off assertions, set assume_sorted to true.\n\nCredit: traktofon @ https://discourse.julialang.org/t/findnearest-function/4143/4 Vector Vector version by Christian Gilbertson? issorted assertion and optional assume_sorted added by Eric Ford\n\n\n\n\n\n","category":"function"},{"location":"internals/#RvSpectMLBase.time-Union{Tuple{ACLT}, Tuple{ACLT, Integer}} where ACLT<:AbstractChunkListTimeseries","page":"Internals","title":"RvSpectMLBase.time","text":"Get time of ith observation in chunklisttimeseries.  \n\n\n\n\n\n","category":"method"},{"location":"internals/#Interpolation","page":"Internals","title":"Interpolation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase.LinearInterpolation ]\nPublic = false\nOrder = [ :function]","category":"page"},{"location":"internals/#Instrument-specific","page":"Internals","title":"Instrument specific","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase.TheoreticalInstrument  ]\nPublic = false\nOrder = [ :function]","category":"page"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.calc_λ-Tuple{Any, TheoreticalInstrument1D}","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.calc_λ","text":"calc_λs(inst) Compute the wavelength for one pixel of a theoretical 1d instrument\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.calc_λs","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.calc_λs","text":"calc_λs Generate an array of n wavelengths uniformly spaced in log(lambda)\n\n\n\n\n\n","category":"function"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.calc_λs-Tuple{Real, Real, Integer}","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.calc_λs","text":"calc_λs(λ_min, λ_max, n) Generate an array of n wavelengths uniformly spaced in log(lambda) from λmin to λmax.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.calc_λs-Tuple{TheoreticalInstrument1D}","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.calc_λs","text":"calc_λs(inst) Generate an array of wavelengths based on a theoretical instrument's properties\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.calc_λs-Tuple{TheoreticalInstrument2D}","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.calc_λs","text":"calc_λs(inst) Generate an array of wavelengths based on a theoretical instrument's properties\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.demo_generate_spectrum_line-Tuple{AnyTheoreticalInstrument}","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.demo_generate_spectrum_line","text":"demo_generate_spectrum_line( inst ) Generate spectrum with one line for testing purposes.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Other","page":"Internals","title":"Other","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase.Pipeline  ]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"internals/#Types","page":"Internals","title":"Types","text":"","category":"section"},{"location":"internals/#General-purpose-2","page":"Internals","title":"General purpose","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase ]\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals/#Interpolation-2","page":"Internals","title":"Interpolation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase.LinearInterpolation ]  \nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals/#Instrument-specific-2","page":"Internals","title":"Instrument specific","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [ RvSpectMLBase.TheoreticalInstrument  ]\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals/#Other-2","page":"Internals","title":"Other","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase.Pipeline  ]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"modules/","page":"Modules","title":"Modules","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"modules/#RvSpectMLBase-Modules","page":"Modules","title":"RvSpectMLBase Modules","text":"","category":"section"},{"location":"modules/","page":"Modules","title":"Modules","text":"Pages = [\"modules.md\"]\nDepth = 3","category":"page"},{"location":"modules/","page":"Modules","title":"Modules","text":"Modules = [RvSpectMLBase ]\nOrder = [:module]","category":"page"},{"location":"modules/#Instrument-specific-Modules","page":"Modules","title":"Instrument-specific Modules","text":"","category":"section"},{"location":"modules/","page":"Modules","title":"Modules","text":"Modules = [ RvSpectMLBase.TheoreticalInstrument  ]\nOrder = [:module]","category":"page"},{"location":"modules/#RvSpectMLBase.TheoreticalInstrument","page":"Modules","title":"RvSpectMLBase.TheoreticalInstrument","text":"Module providing types and traits and customized functions for a generic theoretical spectrograph.\n\n\n\n\n\n","category":"module"},{"location":"modules/#Other-Modules","page":"Modules","title":"Other Modules","text":"","category":"section"},{"location":"modules/","page":"Modules","title":"Modules","text":"Modules = [RvSpectMLBase.Pipeline  ]\nOrder = [:module]","category":"page"},{"location":"modules/#RvSpectMLBase.Pipeline","page":"Modules","title":"RvSpectMLBase.Pipeline","text":"The PipelinePlan stores what work needs to be done, what plots should be made, and what data/plots should be saved to disk. Users will querty it via  needto(plan, symbol), makeplot(plan, symbol), saveplot(plan, symbol), and savedata(plan, symbol). Users can update the plan with makeplot!(plan, symbol),  dontmake_plot!(plan, symbol), etc.\n\nIn principle, we could cache data here, too.  But I'm not sure if we'll actulaly use that.  So consider the cache as experimental.\n\n\n\n\n\n","category":"module"}]
}
