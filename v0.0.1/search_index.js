var documenterSearchIndex = {"docs":
[{"location":"types/","page":"Types","title":"Types","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"types/#Types-Exported-by-RvSpectMLBase","page":"Types","title":"Types Exported by RvSpectMLBase","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Pages = [\"types.md\"]\nDepth = 3","category":"page"},{"location":"types/#Abstract-Types","page":"Types","title":"Abstract Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ RvSpectMLBase ]\nPrivate = false\nOrder = [:type]\nFilter = t -> isabstracttype(t)","category":"page"},{"location":"types/#RvSpectMLBase.AbstractChunkOfSpectrum","page":"Types","title":"RvSpectMLBase.AbstractChunkOfSpectrum","text":"Abstract type for any ChunkOfSpectrum \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractInstrument","page":"Types","title":"RvSpectMLBase.AbstractInstrument","text":"Abstract Base type for Instruments \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractInstrument1D","page":"Types","title":"RvSpectMLBase.AbstractInstrument1D","text":"Abstract Base type for 1-D extracted spectra Should be specialized for specific instruments. \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractInstrument2D","page":"Types","title":"RvSpectMLBase.AbstractInstrument2D","text":"Abstract Base type for 2-D extracted spectra. Should be specialized for each instrument \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractSpectra","page":"Types","title":"RvSpectMLBase.AbstractSpectra","text":"Abstract type for any Spectrum (or region of spectrum) \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractSpectra1D","page":"Types","title":"RvSpectMLBase.AbstractSpectra1D","text":"Abstract type for any 1-d Spectrum (or region of spectrum) \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.AbstractSpectra2D","page":"Types","title":"RvSpectMLBase.AbstractSpectra2D","text":"Abstract type for any 2-d Spectrum \n\n\n\n\n\n","category":"type"},{"location":"types/#General-purpose","page":"Types","title":"General purpose","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ RvSpectMLBase ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types/#RvSpectMLBase.ChunkList","page":"Types","title":"RvSpectMLBase.ChunkList","text":"Struct containing an array of ChunkOfSpectrum \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.ChunkListTimeseries","page":"Types","title":"RvSpectMLBase.ChunkListTimeseries","text":"Mtching lists of times and array of ChunkLists \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.ChunkOfSpectrum","page":"Types","title":"RvSpectMLBase.ChunkOfSpectrum","text":"ChunkOfSpectrum for views into Spectra1DBasic or Spectra2DBasic \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.Spectra1DBasic","page":"Types","title":"RvSpectMLBase.Spectra1DBasic","text":"Basic struct for Spectra1D (or region of specturm) Instruments can specialize their own if additional data is avaliable. \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.Spectra2DBasic","page":"Types","title":"RvSpectMLBase.Spectra2DBasic","text":"Basic struct for Spectra2D (or region of specturm) Instruments can specialize their own if additional data is avaliable. \n\n\n\n\n\n","category":"type"},{"location":"types/#Instrument-specific","page":"Types","title":"Instrument specific","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ RvSpectMLBase.TheoreticalInstrument  ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types/#RvSpectMLBase.TheoreticalInstrument.TheoreticalInstrument1D","page":"Types","title":"RvSpectMLBase.TheoreticalInstrument.TheoreticalInstrument1D","text":"Trait for 1D spectra from a theoretical instrument \n\n\n\n\n\n","category":"type"},{"location":"types/#RvSpectMLBase.TheoreticalInstrument.TheoreticalInstrument2D","page":"Types","title":"RvSpectMLBase.TheoreticalInstrument.TheoreticalInstrument2D","text":"Trait for a 2D spectra from a theoretical instrument \n\n\n\n\n\n","category":"type"},{"location":"types/#Other","page":"Types","title":"Other","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ RvSpectMLBase.Pipeline  ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"functions/#Functions-Exported-by-RvSpectML","page":"Functions","title":"Functions Exported by RvSpectML","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Pages = [\"functions.md\"]\nDepth = 3","category":"page"},{"location":"functions/#General-purpose","page":"Functions","title":"General purpose","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [RvSpectMLBase ]\nPrivate = false\nOrder = [:function ]","category":"page"},{"location":"functions/#Base.length-Union{Tuple{ACLT}, Tuple{ACLT}} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"Base.length","text":"Return number of times/ChunkLists in a ChunkListTimeseries \n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.length-Union{Tuple{CLT}, Tuple{CLT}} where CLT<:AbstractChunkList","page":"Functions","title":"Base.length","text":"Return number of chunks in ChunkList \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.absorption_line-Union{Tuple{T}, Tuple{T}} where T<:Real","page":"Functions","title":"RvSpectMLBase.absorption_line","text":"absorption_line(x; mid, width, depth)\n\nReturn a Gaussian absorption line profile evaluated at x.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.apply_doppler_boost!","page":"Functions","title":"RvSpectMLBase.apply_doppler_boost!","text":"apply_doppler_boost!(spectrum, doppler_factor) -> typeof(spectrum)\napply_doppler_boost!(spectra, df) -> typeof(spectra)\n\nApply Doppler boost to spectra's Î»'s and update its metadata[:doppler_factor], so it will know how to undo the transform.\n\nArguments:\n\nspectrum::AbstractSpectra: spectrum to be boosted\ndoppler_factor::Real: boost factor (1 = noop)\n\nor\n\nspectra::AbstractArray{<:AbstractSpectra}: spectra to be boosted\ndf::DataFrame: provides :drift and :ssb_rv (in m/s) for calculating the Doppler boost for each spectrum\n\nTODO: Improve documentation formatting.  This can serve as a template.\n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.calc_doppler_factor","page":"Functions","title":"RvSpectMLBase.calc_doppler_factor","text":"calcdopplerfactor(rv; v_perp)\n\nReturn the Doppler boost factor (non-relativistic) for rv in m/s.\n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.calc_normalization-Union{Tuple{ACL}, Tuple{ACL}} where ACL<:AbstractChunkList","page":"Functions","title":"RvSpectMLBase.calc_normalization","text":"Calc normalization of spectra based on average flux in a ChunkList. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.calc_normalization-Union{Tuple{AC}, Tuple{AC}} where AC<:AbstractChunkOfSpectrum","page":"Functions","title":"RvSpectMLBase.calc_normalization","text":"Calc normalization of chunk based on average flux in a ChunkOfSpectrum. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.calc_normalization_var_weighted-Union{Tuple{ACL}, Tuple{ACL}} where ACL<:AbstractChunkList","page":"Functions","title":"RvSpectMLBase.calc_normalization_var_weighted","text":"Calc normalization of spectra based on average flux in a ChunkList using inverse variance weighting. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.calc_normalization_var_weighted-Union{Tuple{AC}, Tuple{AC}} where AC<:AbstractChunkOfSpectrum","page":"Functions","title":"RvSpectMLBase.calc_normalization_var_weighted","text":"Calc normalization of chunk based on average flux in a ChunkOfSpectrum using inverse variance weighting. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.code_to_include_param_jl","page":"Functions","title":"RvSpectMLBase.code_to_include_param_jl","text":"codetoincludeparamjl( pathtosearch )\n\nReturns a Code object.  After res = code_toread_param_jl( path_to_search ), execute eval(res) to actually include the param.jl file. This is useful since it allows variables to be placed into caller's namespace.\n\nWarning:  Malicious users could insert arbitrary code into param.jl.  Don't be a malicous user.\n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.find_line_best","page":"Functions","title":"RvSpectMLBase.find_line_best","text":"Return (pixels, order) pair that contain \"best\" region of spectra, based on highest SNR. \n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.find_orders_in_range-Union{Tuple{T}, Tuple{Real,Real,AbstractArray{T,2}}} where T<:Real","page":"Functions","title":"RvSpectMLBase.find_orders_in_range","text":"Return list of all orders that include any wavelengths between goallo and goalhi \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.find_orders_with_line-Union{Tuple{T}, Tuple{Real,AbstractArray{T,2}}} where T<:Real","page":"Functions","title":"RvSpectMLBase.find_orders_with_line","text":"Return list of all orders that contain a pixel with wavelength lambda \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.find_orders_with_line-Union{Tuple{T}, Tuple{Real,Real,AbstractArray{T,2}}} where T<:Real","page":"Functions","title":"RvSpectMLBase.find_orders_with_line","text":"Return list of all orders that contain all pixels with wavelengths between goallo and goalhi \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.find_pixels_for_line_in_chunk-Tuple{AbstractChunkOfSpectrum,Real,Real}","page":"Functions","title":"RvSpectMLBase.find_pixels_for_line_in_chunk","text":"Find pixels included in a range of wavelengths \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.findall_line","page":"Functions","title":"RvSpectMLBase.findall_line","text":"Return list of (pixels, order) pairs that contain pixels with desireed wavelengths.     Excludes locations that contain any pixels with var == NaN.\n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.get_Î»_range-Union{Tuple{ACLT}, Tuple{ACLT}, Tuple{CLT}} where ACLT<:(AbstractArray{CLT,N} where N) where CLT<:AbstractSpectra","page":"Functions","title":"RvSpectMLBase.get_Î»_range","text":"Return the largest minimum wavelength and smallest maximum wavelength across an array of spectra. Calls getÎ»range(AbstractSpectra2D) that should be specialized for each instrument. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.get_Î»_range-Union{Tuple{CLT}, Tuple{CLT}} where CLT<:AbstractSpectra","page":"Functions","title":"RvSpectMLBase.get_Î»_range","text":"Return the largest minimum wavelength and smallest maximum wavelength of a spectrum.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.make_chunk_list-Union{Tuple{AS}, Tuple{AS,DataFrames.DataFrame}} where AS<:AbstractSpectra","page":"Functions","title":"RvSpectMLBase.make_chunk_list","text":"Return a ChunkList of best regions of spectrum with lines in lineline.     linelist is a DataFrame containing :lambdalo and :lambdahi.     Pads edges by Î.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.make_grid_for_chunk-Union{Tuple{ACLT}, Tuple{ACLT,Integer}} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectMLBase.make_grid_for_chunk","text":"makegridfor_chunk Create a range with equal spacing between points with end points set based on union of all chunks in timeseries.\n\nArguments:\n\ntimeseries: ChunkListTimeseries\nchunk index:\noversample_factor: (1)\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.make_orders_into_chunks","page":"Functions","title":"RvSpectMLBase.make_orders_into_chunks","text":"makeordersinto_chunks\n\nReturn a ChunkList with a region of spectrum from each order in orderstouse.\n\nArguments\n\nspectra<:AbstractSpectra\ninst:  Instrument trait that provides default values\n\nOptional arguments\n\norderstouse: Range or Array (orderstouse(inst))\npixelstouse: Array of Ranges (each from mincol to maxcol)\n\nor\n\nmincol: (mincol_default(inst,order)) and\nmaxcol: (maxcol_default(inst,order))\n\n\n\n\n\n","category":"function"},{"location":"functions/#RvSpectMLBase.make_vec_metadata_from_spectral_timeseries-Union{Tuple{AA}, Tuple{AA}, Tuple{AS}} where AA<:AbstractArray{AS,1} where AS<:AbstractSpectra","page":"Functions","title":"RvSpectMLBase.make_vec_metadata_from_spectral_timeseries","text":"Extract the metadata from a time series of spectra and return it as an array. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.normalize_spectra!-Union{Tuple{AS}, Tuple{ST}, Tuple{ACLT}, Tuple{ACLT,AS}} where AS<:(AbstractArray{ST,N} where N) where ST<:AbstractSpectra where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectMLBase.normalize_spectra!","text":"Normalize each spectrum based on sum of fluxes in chunk_timeseries region of each spectrum. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.normalize_spectrum!-Union{Tuple{ST}, Tuple{ST,Real}} where ST<:AbstractSpectra","page":"Functions","title":"RvSpectMLBase.normalize_spectrum!","text":"Normalize spectrum, multiplying fluxes by scale_fac. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.num_chunks-Union{Tuple{ACLT}, Tuple{ACLT}} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectMLBase.num_chunks","text":"Number of chunks in first chunklist in chunklist_timeseries. \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.num_times-Union{Tuple{ACLT}, Tuple{ACLT}} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectMLBase.num_times","text":"Return number of times/ChunkLists in a ChunkListTimeseries \n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.read_data_paths-Tuple{}","page":"Functions","title":"RvSpectMLBase.read_data_paths","text":"readdatapaths( ; pathtosearch ) Looks for datapaths.jl and includes it to set datapaths\n\nWarning:  Malicious users could insert arbitrary code into data_paths.jl.  Don't be a malicous user.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Example-Instrument","page":"Functions","title":"Example Instrument","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [RvSpectMLBase.TheoreticalInstrument  ]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"functions/#RvSpectMLBase.TheoreticalInstrument.generate_spectra_timeseries-Tuple{AbstractArray,DataFrames.DataFrame,Union{TheoreticalInstrument1D, TheoreticalInstrument2D},AbstractArray}","page":"Functions","title":"RvSpectMLBase.TheoreticalInstrument.generate_spectra_timeseries","text":"generatespectratimeseries(linelist, inst; time, rv, ssbz, snrperpixel, linewidth, addnoise ) Generate a time series of spectra using times, a linelist (as DataFrame with columns lambda and weight) and a theoretical instrument. Optionally, specify times, rv's, barycentric corrections, etc.\n\n\n\n\n\n","category":"method"},{"location":"functions/#RvSpectMLBase.TheoreticalInstrument.generate_spectrum-Tuple{DataFrames.DataFrame,Union{TheoreticalInstrument1D, TheoreticalInstrument2D}}","page":"Functions","title":"RvSpectMLBase.TheoreticalInstrument.generate_spectrum","text":"generatespectrum(linelist, inst; time, rv, ssbz, snrperpixel, linewidth, addnoise ) Generate a spectrum using a line_list (as DataFrame with columns lambda and weight) and theoretical instrument. Optionally, specify times, rv's, barycentric corrections, etc.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Other","page":"Functions","title":"Other","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [ RvSpectMLBase.Pipeline  ]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"contents/#API-Overview","page":"Overview","title":"API Overview","text":"","category":"section"},{"location":"contents/","page":"Overview","title":"Overview","text":"Pages = [\"modules.md\",\"functions.md\", \"types.md\", \"internals.md\"]\nDepth = 5","category":"page"},{"location":"longlist/","page":"Index","title":"Index","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"longlist/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"longlist/","page":"Index","title":"Index","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"#RvSpectMLBase","page":"Home","title":"RvSpectMLBase","text":"","category":"section"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia 1.5.  On Penn State's ICS-ACI, it is avaliable at  /gpfs/group/ebf11/default/julia/bin/julia.\nInstall the RvSpectMLBase package and it's dependencies.  From julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"https://github.com/RvSpectML/RvSpectMLBase.jl\")\nPkg.instantiate()","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run the tests","category":"page"},{"location":"","page":"Home","title":"Home","text":"> include(\"test/runtests.jl\")","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"internals/#RvSpectML-Internals","page":"Internals","title":"RvSpectML Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"As a heads up, these functions and types are more likely to change going forward than functions and types that are exported.  ","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]\nDepth = 3","category":"page"},{"location":"internals/#Functions","page":"Internals","title":"Functions","text":"","category":"section"},{"location":"internals/#General-purpose","page":"Internals","title":"General purpose","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase ]\nPublic = false\nOrder = [ :function ]","category":"page"},{"location":"internals/#Base.append!-Union{Tuple{CLT}, Tuple{CLT,CLT}} where CLT<:AbstractChunkList","page":"Internals","title":"Base.append!","text":"Append second chunk list to the first.  \n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.getindex-Union{Tuple{CLT}, Tuple{CLT,Any}} where CLT<:AbstractChunkList","page":"Internals","title":"Base.getindex","text":"Provide direct access to data, an AbstractArray of ChunkOfSpectrum's via [] operator \n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.getindex-Union{Tuple{CLT}, Tuple{CLT,Any}} where CLT<:AbstractChunkListTimeseries","page":"Internals","title":"Base.getindex","text":"Allow direct access to data, an AbstractArray of ChunkOfSpectrum's via [] operator \n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.setindex!-Union{Tuple{CLT}, Tuple{CLT,Any,CLT}} where CLT<:AbstractChunkList","page":"Internals","title":"Base.setindex!","text":"Provide direct access to data, an AbstractArray of ChunkOfSpectrum's via [] operator \n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.setindex!-Union{Tuple{CLT}, Tuple{CLT,Any,CLT}} where CLT<:AbstractChunkListTimeseries","page":"Internals","title":"Base.setindex!","text":"Allow direct access to data, an AbstractArray of ChunkOfSpectrum's via [] operator \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.allequal-Union{Tuple{AbstractArray{T,1}}, Tuple{T}} where T<:Real","page":"Internals","title":"RvSpectMLBase.allequal","text":"Return true if all elements of array are equal to each other. \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.calc_line_bisector_at_frac_depth-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},Real}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectMLBase.calc_line_bisector_at_frac_depth","text":"calclinebisectoratfracdepth(Î», flux, fracdepth ) Returns the line average of wavelengths (units of Î») at specified fractional line depth. Assumes continuum is the maximum flux provided.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.calc_line_width-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},Real}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectMLBase.calc_line_width","text":"calclinebisectoratfracdepth(Î», flux, absdepth ) Returns the line average of wavelengths (units of Î») at specified absolute line depth. Assumes continuum is the maximum flux provided.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.calc_line_width-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1}}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectMLBase.calc_line_width","text":"calclinewidth(Î», flux; frac_depth ) Returns the line width (units of Î») for specified fractional line depth (default of 0.5). Assumes continuum is the maximum flux provided.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.calc_snr-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,N} where N,AbstractArray{T2,N} where N}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectMLBase.calc_snr","text":"Calculate total SNR in (region of) spectra. \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.check_if_line_match-Union{Tuple{T}, Tuple{Real,AbstractArray{T,1}}} where T<:Real","page":"Internals","title":"RvSpectMLBase.check_if_line_match","text":"checkifline_match ( Î», list ; threshold ) Return true if list contains a wavelength differing from Î» by no more than threshold (in units of ÎÎ»/Î»)\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.find_cols_to_fit-Union{Tuple{T}, Tuple{AbstractArray{T,1},Real,Real}} where T<:Real","page":"Internals","title":"RvSpectMLBase.find_cols_to_fit","text":"Return a range of columns indices with wavelengths between linelo and linehi \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.find_cols_to_fit-Union{Tuple{T}, Tuple{AbstractArray{T,1},Real}} where T<:Real","page":"Internals","title":"RvSpectMLBase.find_cols_to_fit","text":"Return a range of columns indices with wavelengths within Î of line_center \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.find_which_line_fits_in_line_list-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1}}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectMLBase.find_which_line_fits_in_line_list","text":"findwhichlinefitsinlinelist( fitlist, linelist; threshold ) Return list of Bools indicatin which line(s) from fitlist match a line in linelist to within threshold (in units of ÎÎ»/Î») Warning: Untested\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.findargminmax-Tuple{Any}","page":"Internals","title":"RvSpectMLBase.findargminmax","text":"findargminmax(a) Return (argmin, min, argmax, max) Adapapted from https://github.com/JuliaLang/julia/blob/697e782ab86bfcdd7fd15550241fe162c51d9f98/base/array.jl#L2191\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.instrument-Union{Tuple{ACLT}, Tuple{ACLT}} where ACLT<:AbstractChunkListTimeseries","page":"Internals","title":"RvSpectMLBase.instrument","text":"Get instrument used for chunklisttimeseries.  \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.interp_linear-Union{Tuple{}, Tuple{T2}, Tuple{T1}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectMLBase.interp_linear","text":"interp_linear(;x1::T1,x2::T1,y1::T2,y2::T2,xpred::T1) Return result of simple linear interpolant at xpred. Does not test that xpred is between x1 and x2.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.metadata-Union{Tuple{ACLT}, Tuple{ACLT,Integer,Symbol}} where ACLT<:AbstractChunkListTimeseries","page":"Internals","title":"RvSpectMLBase.metadata","text":"Get metadata[:key] of ith observation in chunklisttimeseries.  \n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.multiple_append!-Union{Tuple{T}, Tuple{Array{T,1},Vararg{Any,N} where N}} where T<:Real","page":"Internals","title":"RvSpectMLBase.multiple_append!","text":"A generalized version of the built in append!() function By Christian Gilbertson?\n\nTODO:  Ask Christian what the purpose of this is relative to std append\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.predict_intrinsic_stellar_line_width-Tuple{Real}","page":"Internals","title":"RvSpectMLBase.predict_intrinsic_stellar_line_width","text":"Estimate line width based on stellar Teff (K) and optionally v_rot (m/s).  Output in m/s.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.searchsortednearest","page":"Internals","title":"RvSpectMLBase.searchsortednearest","text":"searchsortednearest(a<:AbstractVector, x::Real; assumesorted = false )    searchsortednearest(a<:AbstractVector, x<:AbstractVector; assumesorted = false )\n\nFind the index of vector a where the value of a is closest to x.    All vectors are assumed to already be sorted.    To turn off assertions, set assume_sorted to true.\n\nCredit: traktofon @ https://discourse.julialang.org/t/findnearest-function/4143/4 Vector Vector version by Christian Gilbertson? issorted assertion and optional assume_sorted added by Eric Ford\n\n\n\n\n\n","category":"function"},{"location":"internals/#RvSpectMLBase.time-Union{Tuple{ACLT}, Tuple{ACLT,Integer}} where ACLT<:AbstractChunkListTimeseries","page":"Internals","title":"RvSpectMLBase.time","text":"Get time of ith observation in chunklisttimeseries.  \n\n\n\n\n\n","category":"method"},{"location":"internals/#Interpolation","page":"Internals","title":"Interpolation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase.LinearInterpolation ]\nPublic = false\nOrder = [ :function]","category":"page"},{"location":"internals/#Instrument-specific","page":"Internals","title":"Instrument specific","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase.TheoreticalInstrument  ]\nPublic = false\nOrder = [ :function]","category":"page"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.calc_Î»-Tuple{Any,TheoreticalInstrument1D}","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.calc_Î»","text":"calc_Î»s(inst) Compute the wavelength for one pixel of a theoretical 1d instrument\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.calc_Î»s-Tuple{Real,Real,Integer}","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.calc_Î»s","text":"calcÎ»s(Î»min, Î»max, n) Generate an array of n wavelengths uniformly spaced in log(lambda) from Î»min to Î»_max.\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.calc_Î»s-Tuple{TheoreticalInstrument1D}","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.calc_Î»s","text":"calc_Î»s(inst) Generate an array of wavelengths based on a theoretical instrument's properties\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.calc_Î»s-Tuple{TheoreticalInstrument2D}","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.calc_Î»s","text":"calc_Î»s(inst) Generate an array of wavelengths based on a theoretical instrument's properties\n\n\n\n\n\n","category":"method"},{"location":"internals/#RvSpectMLBase.TheoreticalInstrument.demo_generate_spectrum_line-Tuple{Union{TheoreticalInstrument1D, TheoreticalInstrument2D}}","page":"Internals","title":"RvSpectMLBase.TheoreticalInstrument.demo_generate_spectrum_line","text":"demogeneratespectrum_line Generate spectrum with one line for testing purposes.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Other","page":"Internals","title":"Other","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase.Pipeline  ]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"internals/#Types","page":"Internals","title":"Types","text":"","category":"section"},{"location":"internals/#General-purpose-2","page":"Internals","title":"General purpose","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase ]\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals/#Interpolation-2","page":"Internals","title":"Interpolation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase.LinearInterpolation ]  \nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals/#Instrument-specific-2","page":"Internals","title":"Instrument specific","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [ RvSpectMLBase.TheoreticalInstrument  ]\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals/#Other-2","page":"Internals","title":"Other","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [RvSpectMLBase.Pipeline  ]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"modules/","page":"Modules","title":"Modules","text":"CurrentModule = RvSpectMLBase","category":"page"},{"location":"modules/#RvSpectML-Modules","page":"Modules","title":"RvSpectML Modules","text":"","category":"section"},{"location":"modules/","page":"Modules","title":"Modules","text":"Pages = [\"modules.md\"]\nDepth = 3","category":"page"},{"location":"modules/","page":"Modules","title":"Modules","text":"Modules = [RvSpectMLBase ]\nOrder = [:module]","category":"page"},{"location":"modules/#Instrument-specific-Modules","page":"Modules","title":"Instrument-specific Modules","text":"","category":"section"},{"location":"modules/","page":"Modules","title":"Modules","text":"Modules = [ RvSpectMLBase.TheoreticalInstrument  ]\nOrder = [:module]","category":"page"},{"location":"modules/#RvSpectMLBase.TheoreticalInstrument","page":"Modules","title":"RvSpectMLBase.TheoreticalInstrument","text":"Module providing types and traits and customized functions for a generic theoretical spectrograph.\n\n\n\n\n\n","category":"module"},{"location":"modules/#Other-Modules","page":"Modules","title":"Other Modules","text":"","category":"section"},{"location":"modules/","page":"Modules","title":"Modules","text":"Modules = [RvSpectMLBase.Pipeline  ]\nOrder = [:module]","category":"page"},{"location":"modules/#RvSpectMLBase.Pipeline","page":"Modules","title":"RvSpectMLBase.Pipeline","text":"The PipelinePlan stores what work needs to be done, what plots should be made, and what data/plots should be saved to disk. Users will querty it via  needto(plan, symbol), makeplot(plan, symbol), saveplot(plan, symbol), and savedata(plan, symbol). Users can update the plan with makeplot!(plan, symbol),  dontmake_plot!(plan, symbol), etc.\n\nIn principle, we could cache data here, too.  But I'm not sure if we'll actulaly use that.  So consider the cache as experimental.\n\n\n\n\n\n","category":"module"}]
}
